pipeline {
  agent {
    kubernetes {
      inheritFrom "kaniko"
    }
  }

  environment {
    REGISTRY = "docker.flightdeck.tech"
    NAMESPACE = "powernotes"
  }

  stages {
    stage("Find services to build docker image") {
      steps {
        script {
          def publisher = LastChanges.getLastChangesPublisher "LAST_SUCCESSFUL_BUILD", "SIDE", "LINE", true, true, "", "", "", "", ""
          publisher.publishLastChanges()
          def changes = publisher.getLastChanges()
          def pattern = /diff --([\w]+) a\/(.*?) b\/(.*?)\n/
          def c = changes.getDiff()
          def files = findFiles(glob: "*/Dockerfile")
          def services = []
          files.each {
            println "Found Dockerfile: ${it}"
            def parts = it.path.split("/")
            services.add(parts[0])
          }
          def buildDocker = [] as Set<String>
          c.eachMatch(pattern) { m ->
            def filename = m[2]
            def parts = filename.split("/")
            if (parts[0] == "common") {
              println "Common changed, build all services: ${services}"
              services.each {
                buildDocker.add(it)
              }
            } else if (services.contains(parts[0])) {
              buildDocker.add(parts[0])
            }
          }
          println "Find services to build: ${buildDocker}"
          deployTasks = [:]
          buildDocker.each() {
            def dockerfile = "${it}/Dockerfile"
            def tag = "${env.REGISTRY}/${env.NAMESPACE}/${it}:${env.GIT_COMMIT}"
            println "Built task for ${dockerfile} as ${tag}"
            stage("Build and push ${it}") {
              container("kaniko") {
                sh """
                /kaniko/executor --cache=true \
                  --cache-dir /cache \
                  --context `pwd` \
                  --dockerfile `pwd`/${dockerfile} \
                  --destination ${tag}
                """
              }
            }
            def k8sFile = "${it}/k8s.yaml"
            def k8sFound = findFiles(glob: k8sFile).length > 0
            if (k8sFound) {
              deployTasks["Deploy ${it}"] = {
                stage("Deploy ${it}") {
                  container("kubectl") {
                    contentReplace(
                      configs: [
                        fileContentReplaceConfig(
                          configs: [
                            fileContentReplaceItemConfig(
                              search: '(\\#\\{IMAGE\\})',
                              replace: "${tag}",
                              matchCount: 1,
                            )
                          ],
                          fileEncoding: 'UTF-8',
                          filePath: k8sFile
                        )
                      ]
                    )
                    withKubeConfig(namespace: "${env.NAMESPACE}") {
                      sh "kubectl apply -f ${k8sFile}"
                    }
                  }
                }
              }
            }
          }
          parallel deployTasks
        }
      }
    }
  }
}